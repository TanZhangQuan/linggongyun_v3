server:
  port: 8081

spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/linggongyun_v3?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2B8
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    initial-size: 10
    max-active: 10000
    min-idle: 2
    max-wait: 100000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    #  是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
    pool-prepared-statements: true
    # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
    max-open-prepared-statements: 100
    validation-query: select 1 from dual
    validation-query-timeout: 100000
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 建议false
    test-on-borrow: false
    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 ，建议false
    test-on-return: false
    test-while-idle: true
    max-pool-prepared-statement-per-connection-size: 20
    filters: stat,wall
  redis:
    host: 127.0.0.1  # Redis服务器地址
    port: 6379 # Redis服务器连接端口
    password:   #linggongyun_v3 # Redis服务器连接密码（默认为空）
    jedis:
      pool:
        max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
        max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-idle: 8 # 连接池中的最大空闲连接数
        min-idle: 0 # 连接池中的最小空闲连接
    timeout: 3000 # 连接超时时间（毫秒）
  data:
    redis:
      repositories:
        enabled: false

  servlet:
    multipart:
      # 单个文件的最大值
      max-file-size: 40MB
      # 上传文件总的最大值
      max-request-size: 100MB

mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    auto-mapping-behavior: full
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:mapper/*Mapper.xml
  type-aliases-package: classpath*:com.example.mybatis.entity

  global-config:
    # 逻辑删除配置
    db-config:
      # 删除前
      logic-not-delete-value: 1
      # 删除后
      logic-delete-value: 0

#微信Appid
APPID: "wx3870ff35a721932e"

SECRET: "cf6f1bcea8c984dc699d2e554f9b2bf6"

#
PWD_KEY: "esdafw"

#初始化主帐号
SMS:
  AccountSid: "8a216da873b27ace0173b30bff5d0079"

  #主帐号TOKEN
  AccountToken: "b12a28072550438486f44fce85ad3fe6"

  #初始化应用ID
  AppId: "8a216da873b27ace0173b30c00620081"

  #模板ID
  TemplateId: "624431"

  #初始化服务器地址,服务器地址不需要写https://
  serverIP: "app.cloopen.com"

  #初始化服务器端口
  serverPort: "8883"


TOKEN: token

JWT:
  secret: "yixi"

  expire: "7"

  header: "linggongyun_v3"

#本地图片存储路径
PathImage_KEY: "D:/upload/image/"

#本地excel存储路径
PathExcel_KEY: "D:/upload/excel/"

#本地视频存储路径
PathVideo_KEY: "D:/upload/video/"

#图片的访问路径
fileStaticAccesspathImage: "/static/image/"

#excel的访问路径
fileStaticAccesspathExcel: "/static/excel/"

#视频的访问路径
fileStaticAccesspathVideo: "/static/Video/"

#模板文件
TemplateFile:
  #  合同模板
  Contract: "D:/TemplateFile/test.pdf"
  #  总包+分包支付明细模板
  TotalPayInventory: "D:/TemplateFile/inventory.xlsx"
  #  众包支付明细模板
  ManyPayInventory: "D:/TemplateFile/inventory.xlsx"
  #  总包+分包交付支付验收单
  TotalAcceptanceCertificate: "D:/TemplateFile/acceptanceCertificate.xlsx"
  #  众包交付支付验收单
  ManyAcceptanceCertificate: "D:/TemplateFile/acceptanceCertificate.xlsx"
  #  导入创客的模板
  ImportWorker: "D:/TemplateFile/importWorker.xlsx"
  #  模板文件夹路径
  Path: "D:/TemplateFile/"
  #  模板访问路径
  StaticAccesspath: "/static/TemplateFile/"

#发送签署合同应用的密钥
appSecret: "872614e259eded522417c76ad0fb06f0"

salary:
  #连连银通公钥（不需替换，这是连连公钥，用于报文加密和连连返回响应报文时验签，不是商户生成的公钥.
  PUBLIC_KEY_ONLINE: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCSS/DiwdCf/aZsxxcacDnooGph3d2JOj5GXWi+q3gznZauZjkNP8SKl3J2liP0O6rU/Y/29+IUe+GTMhMOFJuZm1htAtKiu5ekW0GlBMWxf4FPkYlQkPE0FtaoMP3gYfh+OwI+fIRrpW3ySn3mScnc6Z700nU/VYrRkfcSCbSnRwIDAQAB
  #接收商户总包付款的连薪回调通知地址
  merchantNotifyUrl: http://2181s627z8.qicp.vip/merchant/lianlianpay/merchantNotifyUrl
  #接收商户众包付款的连薪回调通知地址
  merchantManyNotifyUrl: http://2181s627z8.qicp.vip/merchant/lianlianpay/merchantManyNotifyUrl
  #接收付款给创客的连薪回调通知地址
  workerNotifyUrl: http://2181s627z8.qicp.vip/platform/lianlianpay/workerNotifyUrl
  url:
    #实时付款
    paymentapi: https://test.lianlianpay-inc.com/paymentapi/payment.htm
    #付款确认接口
    confirmPayment: https://test.lianlianpay-inc.com/paymentapi/confirmPayment.htm
    #查询商户余额接口
    selectRemainingSum: https://traderapi.lianlianpay.com/traderAcctQuery.htm
